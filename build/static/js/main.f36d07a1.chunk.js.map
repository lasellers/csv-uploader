{"version":3,"sources":["serviceWorker.js","redux/reducers/csv.js","redux/reducers/index.js","redux/store.js","redux/actions.js","pages/CsvUploadPage.js","pages/CsvColumnMappingPage.js","pages/RemappingPreviewPage.js","pages/ProcessPage.js","pages/ContactsPage.js","pages/CustomAttributesPage.js","pages/NotFoundPage.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","initialState","csv_header","csv_data","unmapped_data","remapped_csv_data","remapped_order","columns","namedColumns","order","columnsWId","namedColumnsWId","combineReducers","csv","state","action","type","payload","createStore","rootReducer","__REDUX_DEVTOOLS_EXTENSION__","addCsvHeader","data","addCsvData","addUnmappedData","CsvUploadPage","props","onFileChange","event","a","preventDefault","files","target","length","text","csvToArray","header","store","dispatch","setState","selectedFile","rows","trim","split","shift","newRows","forEach","row","line","push","onFileUpload","goNext","uploadedFileData","name","lastModifiedDate","toDateString","error","bind","this","to","className","onChange","onClick","toLocaleString","React","Component","CsvColumnMappingPage","onMappingChange","id","value","onMappingAccept","getState","remappedCsv","remappedData","unmappedData","remapped","newRow","index","goBack","nav","map","column","key","orderValue","index2","RemappingPreviewPage","col","ProcessPage","isLoaded","data_inserts","unmapped_data_inserts","fetch","API_URL","method","headers","body","JSON","stringify","then","res","json","console","ContactsPage","getContacts","contacts","onContactDelete","result","contact","team_id","phone","email","sticky_phone_number_id","created_at","updated_at","CustomAttributesPage","log","onCustomAttributeDelete","goHome","custom_attributes","customAttributes","flatMap","customAttribute","contact_id","NotFoundPage","App","Navbar","expand","Nav","Link","as","path","component","exact","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.f36d07a1.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\n    csv_header: [],\n    csv_data: [],\n    unmapped_data: [],\n    remapped_csv_data: [],\n    remapped_order: [],\n    // read only SSOA\n    columns: ['team_id', 'name', 'phone', 'email', 'sticky_phone_number_id', 'created_at', 'updated_at'],\n    namedColumns: ['Team Id', 'Name', 'Phone', 'Email', 'Sticky Phone Number Id', 'Created', 'Updated'],\n    order: [0, 1, 2, 3, 4, 5, 6, 7],\n    columnsWId: ['id', 'team_id', 'name', 'phone', 'email', 'sticky_phone_number_id', 'created_at', 'updated_at'],\n    namedColumnsWId: ['#', 'Team Id', 'Name', 'Phone', 'Email', 'Sticky Phone Number Id', 'Created', 'Updated'],\n};\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case 'ADD_CSV_HEADER': {\n            const {csv_header} = action.payload;\n            return {\n                ...state,\n                csv_header\n            };\n        }\n        case 'ADD_CSV_DATA': {\n            const {csv_data} = action.payload;\n            return {\n                ...state,\n                csv_data\n            };\n        }\n        case 'ADD_UNMAPPED_DATA': {\n            const {unmapped_data} = action.payload;\n            return {\n                ...state,\n                unmapped_data\n            };\n        }\n        case 'ADD_REMAPPED_CSV_DATA': {\n            const {remapped_csv_data} = action.payload;\n            return {\n                ...state,\n                remapped_csv_data\n            };\n        }\n        case 'ADD_REMAPPED_COLUMN_ORDER': {\n            const {remapped_order} = action.payload;\n            return {\n                ...state,\n                remapped_order\n            };\n        }\n        default:\n            return state;\n    }\n}\n","import { combineReducers } from \"redux\";\n\nimport csv from \"./csv\";\n\nexport default combineReducers({ csv });\n","import {createStore} from \"redux\";\n\nimport rootReducer from \"./reducers/index\";\n\nexport default createStore(rootReducer,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n","export const addCsvHeader = data => ({\n    type: 'ADD_CSV_HEADER',\n    payload: {\n        csv_header: data\n    }\n});\n\nexport const addCsvData = data => ({\n    type: 'ADD_CSV_DATA',\n    payload: {\n        csv_data: data\n    }\n});\n\nexport const addUnmappedData = data => ({\n    type: 'ADD_UNMAPPED_DATA',\n    payload: {\n        unmapped_data: data\n    }\n});\n\nexport const addRemappedCsvData = data => ({\n    type: 'ADD_REMAPPED_CSV_DATA',\n    payload: {\n        remapped_csv_data: data\n    }\n});\n\nexport const addRemappedColumnOrder = data => ({\n    type: 'ADD_REMAPPED_COLUMN_ORDER',\n    payload: {\n        remapped_order: data\n    }\n});","import React from 'react';\nimport store from \"../redux/store\";\nimport {Redirect} from \"react-router\";\nimport {addCsvHeader} from \"../redux/actions\";\nimport {addCsvData} from \"../redux/actions\";\n\nclass CsvUploadPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: \"\",\n            selectedFile: null,\n            header: null,\n            data: null,\n            goNext: false\n        };\n\n        this.onFileChange = this.onFileChange.bind(this);\n        this.onFileUpload = this.onFileUpload.bind(this);\n    }\n\n    // Input type=\"file\" onChange, returns FileList on event target\n    // with .files with File object\n    // @see https://developer.mozilla.org/en-US/docs/Web/API/FileList\n    // @see https://developer.mozilla.org/en-US/docs/Web/API/File\n    onFileChange = async event => {\n        event.preventDefault();\n\n        const files = event.target.files;\n        if (files.length > 0) {\n            const csv = (await files[0].text());\n            const [header, data] = this.csvToArray(csv);\n\n            store.dispatch(addCsvHeader(header));\n            store.dispatch(addCsvData(data));\n\n            // Update the state\n            this.setState({\n                selectedFile: files[0],\n                header: header,\n                data: data\n            });\n        }\n    };\n\n    csvToArray = (csv) => {\n        const rows = csv.trim().split(\"\\n\");\n        const header = rows.shift().trim().split(\",\");\n        let newRows = [];\n        rows.forEach(row => {\n            const line = row.trim();\n            if (line.length > 0) newRows.push(line.split(\",\"));\n        });\n        return [\n            header,\n            newRows\n        ];\n    };\n\n    // On file upload (click the upload button)\n    onFileUpload = async (event) => {\n        this.setState({goNext: true});\n    };\n\n    // File content to be displayed after\n    // file upload is complete\n    uploadedFileData = () => {\n        if (this.state.selectedFile) {\n            return (\n                <>\n                    <p><b>CSV File Details</b></p>\n                    <hr/>\n                    <p>File Name: {this.state.selectedFile.name}</p>\n                    <p>File Type: {this.state.selectedFile.type}</p>\n                    <p>Last Modified: {this.state.selectedFile.lastModifiedDate.toDateString()}</p>\n                    <p>Rows: {this.state.data.length}</p>\n                </>\n            );\n        } else {\n            return (\n                <>\n                    <br/>\n                    <h4>Choose File from local system before pressing the Upload button.</h4>\n                </>\n            );\n        }\n    };\n\n    render() {\n        const {error, goNext} = this.state;\n\n        if (goNext) {\n            return <Redirect to='/mapping'/>;\n        }\n\n        return (\n            <>\n                <h1>CSV File Upload</h1>\n\n                <div>\n                    <input className=\"btn btn-secondary mr-2\" type=\"file\" onChange={this.onFileChange}/>\n                    <button className=\"btn btn-primary ml-2\" onClick={this.onFileUpload}>\n                        Upload\n                    </button>\n                </div>\n\n                {this.uploadedFileData()}\n\n                {error.toLocaleString()}\n            </>\n        );\n    }\n}\n\nexport default CsvUploadPage;\n","import React from 'react';\nimport store from \"../redux/store\";\nimport {Redirect} from \"react-router\";\nimport {addRemappedCsvData, addUnmappedData} from \"../redux/actions\";\n\nclass CsvColumnMappingPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: \"\",\n            remapped_order: store.getState().csv.order,\n            goNext: false,\n            goBack: false\n        };\n\n        this.onMappingChange = this.onMappingChange.bind(this);\n        this.onMappingAccept = this.onMappingAccept.bind(this);\n    }\n\n    onMappingChange = async (event) => {\n        const id = (event.target.id.split('-'))[1]; //event.target.selectedIndex;\n        const value = event.target.value;\n\n        const remapped_order = this.state.remapped_order;\n        remapped_order[id] = value;\n        this.setState({remapped_order: remapped_order})\n    };\n\n    onMappingAccept = async event => {\n        const header = store.getState().csv.header;\n        const csv_data = store.getState().csv.csv_data;\n        const remapped_order = this.state.remapped_order;\n\n        const [remappedData, unmappedData] = this.remappedCsv(csv_data, remapped_order);\n\n        store.dispatch(addRemappedCsvData(remappedData));\n        store.dispatch(addUnmappedData(unmappedData));\n\n        // Update the state\n        this.setState({\n            remapped: remappedData,\n            goNext: true\n        });\n    };\n\n    remappedCsv = (rows, remapped_order) => {\n        let newRows = [];\n        rows.forEach(function (row) {\n            let newRow = [];\n            row.forEach(function (value, index) {\n                newRow[remapped_order[index]] = value;\n            });\n            newRows.push(newRow);\n        });\n        return [newRows, []];\n    };\n\n    render() {\n        const {error, goNext, goBack} = this.state;\n\n        if (goNext) {\n            return <Redirect to='/preview'/>;\n        }\n        if (goBack) {\n            return <Redirect to='/upload'/>;\n        }\n\n        const columns = store.getState().csv.namedColumns;\n        const order = store.getState().csv.order;\n        const remapped_order = this.state.remapped_order;\n        const data = store.getState().csv.csv_data;\n\n        const nav = (\n            <>\n                <div>\n                    <button className=\"btn btn-secondary mr-2\" onClick={() => this.setState({goBack: true})}>Back</button>\n                    <button className=\"btn btn-primary ml-2\" onClick={this.onMappingAccept}>Next</button>\n                </div>\n                {error.toLocaleString()}\n            </>\n        );\n\n        if (data.length === 0) {\n            return (\n                <>\n                    <h1>Remapping</h1>\n                    <p>No data.</p>\n                    {nav}\n                </>\n            )\n        }\n\n        return (\n            <>\n                <h1>Remapping</h1>\n\n                <table className=\"table table-striped\">\n                    <thead>\n                    <tr>\n                        <th>Column</th>\n                        <th>Remap from</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {columns.map((column, index) => (\n                        <tr key={index}>\n                            <td>\n                                {column}\n                            </td>\n                            <td>\n                                <select id={\"select-\" + index} value={remapped_order[index]}\n                                        onChange={this.onMappingChange}>\n                                    <option key={-1} value=\"\"></option>\n                                    {order.map((orderValue, index2) => (\n                                        <option id={index + '.' + index2} key={index2}\n                                                value={index2}>{columns[index2]} (Ex: {data[0][index2]})</option>\n                                    ))}\n                                </select>\n                            </td>\n                        </tr>\n                    ))}\n                    </tbody>\n                </table>\n\n                {nav}\n\n            </>\n        );\n    }\n}\n\nexport default CsvColumnMappingPage;\n","import React from 'react';\nimport store from \"../redux/store\";\nimport {Redirect} from \"react-router\";\n\nclass RemappingPreviewPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: \"\",\n            goNext: false,\n            goBack: false\n        };\n    }\n\n    render() {\n        const {error, goNext, goBack} = this.state;\n\n        const columns = store.getState().csv.namedColumns;\n        const data = store.getState().csv.remapped_csv_data;\n\n        if (goNext) {\n            return <Redirect to='/process'/>;\n        }\n        if (goBack) {\n            return <Redirect to='/mapping'/>;\n        }\n\n        const nav = (\n            <>\n                <div>\n                    <button className=\"btn btn-secondary mr-2\" onClick={() => this.setState({goBack: true})}>Back\n                    </button>\n                    <button className=\"btn btn-primary ml-2\" onClick={() => this.setState({goNext: true})}>Next</button>\n                </div>\n\n                {error.toLocaleString()}\n            </>\n        );\n\n        return (\n            <>\n                <h1>Preview</h1>\n\n                <table className=\"table table-striped\">\n                    <thead>\n                    <tr>\n                        {columns.map((column, index) => (\n                            <th key={index}>{column}</th>\n                        ))}\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {data.map((row, index) => (\n                        <tr key={index}>\n                            {row.map((col, index2) => (\n                                <td key={index + \".\" + index2}>{col}</td>\n                            ))}\n                        </tr>\n                    ))}\n                    </tbody>\n                </table>\n\n                {nav}\n            </>\n        );\n    }\n}\n\nexport default RemappingPreviewPage;\n","import React from 'react';\nimport {API_URL} from \"../App\";\nimport store from \"../redux/store\";\nimport {Redirect} from \"react-router\";\n\nclass ProcessPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: \"\",\n            goBack: false,\n            goNext: false,\n            isLoaded: false,\n            data: {\n                data_inserts: 0,\n                unmapped_data_inserts: 0,\n                data: [],\n                unmapped_data: []\n            }\n        };\n    }\n\n    componentDidMount() {\n        const data = store.getState().csv.remapped_csv_data;\n        const unmapped_data = store.getState().csv.unmapped_data;\n        fetch(API_URL + \"/csv/save\", {\n            method: \"POST\",\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({data: data, unmapped_data: unmapped_data})\n        })\n            .then(res => res.json())\n            .then((data) => {\n                    this.setState({\n                        isLoaded: true,\n                        data: data\n                    });\n                },\n                (error) => {\n                    console.error(error);\n                }\n            )\n    }\n\n    render() {\n        const {error, goNext, goBack, isLoaded} = this.state;\n        const data = this.state.data;\n\n        if (goNext) {\n            return <Redirect to='/contacts'/>;\n        }\n        if (goBack) {\n            return <Redirect to='/mapping'/>;\n        }\n\n        const nav = (\n            <>\n                <div>\n                    <button className=\"btn btn-secondary mr-2\" onClick={() => this.setState({goBack: true})}>Back\n                    </button>\n                    <button className=\"btn btn-primary ml-2\" onClick={() => this.setState({goNext: true})}>Next\n                    </button>\n                </div>\n\n                {error.toLocaleString()}\n            </>\n        );\n\n        if (!isLoaded)\n            return (\n                <>\n                    <h1>Process</h1>\n                    <p>Processing....</p>\n                </>\n            );\n\n        return (\n            <>\n                <h1>Process</h1>\n                <p>CSV records have been added to database.</p>\n\n                <hr/>\n\n                <p>Data inserts: {data.data_inserts}</p>\n                <p>Unmapped data inserts: {data.unmapped_data_inserts}</p>\n                <p>Data rows: {data.data?.length}</p>\n                <p>Unmapped data rows: {data.unmapped_data?.length}</p>\n\n                {nav}\n            </>\n        );\n    }\n}\n\nexport default ProcessPage;\n","import React from 'react';\nimport {API_URL} from \"../App\";\nimport store from \"../redux/store\";\nimport {Redirect} from \"react-router\";\n\nclass ContactsPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: \"\",\n            goBack: false,\n            goNext: false,\n            contacts: []\n        };\n    }\n\n    componentDidMount() {\n        this.getContacts();\n    }\n\n    getContacts = () => {\n        fetch(API_URL + \"/contacts\")\n            .then(res => res.json())\n            .then((contacts) => {\n                    this.setState({\n                        isLoaded: true,\n                        contacts\n                    });\n                },\n                (error) => {\n                    console.error(error);\n                    this.setState({\n                        isLoaded: true,\n                        error\n                    });\n                }\n            )\n    };\n\n    onContactDelete = async (id) => {\n        fetch(API_URL + \"/contacts/\" + id, {method: \"DELETE\"})\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    this.getContacts();\n                },\n                (error) => {\n                    console.error(error);\n                }\n            );\n    };\n\n    render() {\n        const {error, isLoaded, contacts, goBack, goNext} = this.state;\n\n        if (goBack) {\n            return <Redirect to='/process'/>;\n        }\n        if (goNext) {\n            return <Redirect to='/custom-attributes'/>;\n        }\n\n        const columns = store.getState().csv.namedColumns;\n\n        const nav = (\n            <>\n                <div>\n                    <button className=\"btn btn-secondary mr-2\" onClick={() => this.setState({goBack: true})}>Back</button>\n                    <button className=\"btn btn-primary ml-2\" onClick={() => this.setState({goNext: true})}>Next</button>\n                </div>\n\n                {error.toLocaleString()}\n            </>\n        );\n\n        if (!isLoaded)\n            return (\n                <>\n                    <h1>Contacts</h1>\n                    <p>None.</p>\n                </>\n            );\n\n        return (\n            <>\n                <h1>Contacts</h1>\n\n                <table className=\"table table-striped\">\n                    <thead>\n                    <tr>\n                        <th>id</th>\n                        <th>Team</th>\n                        <th>Name</th>\n                        <th>Phone</th>\n                        <th>Email</th>\n                        <th>Sticky Phone</th>\n                        <th>Created</th>\n                        <th>Updated</th>\n                        <th>x</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {contacts.map(contact => (\n                        <tr key={contact.id}>\n                            <td>{contact.id}</td>\n                            <td>{contact.team_id}</td>\n                            <td>{contact.name}</td>\n                            <td>{contact.phone}</td>\n                            <td>{contact.email}</td>\n                            <td>{contact.sticky_phone_number_id}</td>\n                            <td>{contact.created_at}</td>\n                            <td>{contact.updated_at}</td>\n                            <td>\n                                <button onClick={() => this.onContactDelete(contact.id)}>X</button>\n                            </td>\n                        </tr>\n                    ))}\n                    </tbody>\n                </table>\n\n                {nav}\n            </>\n        );\n    }\n}\n\nexport default ContactsPage;\n","import React from 'react';\nimport {API_URL} from \"../App\";\nimport store from \"../redux/store\";\nimport {Redirect} from \"react-router\";\n\nclass CustomAttributesPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: \"\",\n            goBack: false,\n            goHome: false,\n            contacts: [\n                {custom_attributes: []}\n            ]\n        };\n    }\n\n    componentDidMount() {\n        this.getContacts();\n    }\n\n    getContacts = () => {\n        fetch(API_URL + \"/contacts\")\n            .then(res => res.json())\n            .then((contacts) => {\n                console.log(contacts);\n                    this.setState({\n                        isLoaded: true,\n                        contacts\n                    });\n                },\n                (error) => {\n                    console.error(error);\n                    this.setState({\n                        isLoaded: true,\n                        error\n                    });\n                }\n            )\n    };\n\n    onCustomAttributeDelete = async (id) => {\n        fetch(API_URL + \"/custom-attributes/\" + id, {method: \"DELETE\"})\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    this.getContacts();\n                },\n                (error) => {\n                    console.error(error);\n                }\n            );\n    };\n\n    render() {\n        const {error, isLoaded, contacts, goBack, goHome} = this.state;\n        const customAttributes = contacts.flatMap(row => {\n            return row.custom_attributes;\n        });\n        const columns = store.getState().csv.namedColumns;\n\n        if (goBack) {\n            return <Redirect to='/contacts'/>;\n        }\n        if (goHome) {\n            return <Redirect to='/upload'/>;\n        }\n\n        const nav = (\n            <>\n                <div>\n                    <button className=\"btn btn-secondary mr-2\" onClick={() => this.setState({goBack: true})}>Back</button>\n                    <button className=\"btn btn-primary ml-2\" onClick={() => this.setState({goHome: true})}>Home</button>\n                </div>\n\n                {error.toLocaleString()}\n            </>\n        );\n\n        if (!isLoaded)\n            return (\n                <>\n                    <h1>Custom Attributes</h1>\n                    <p>None.</p>\n                </>\n            );\n\n        return (\n            <>\n                <h1>Custom Attributes</h1>\n\n                <table className=\"table table-striped\">\n                    <thead>\n                    <tr>\n                        <th>id</th>\n                        <th>Contact Id</th>\n                        <th>Key</th>\n                        <th>Value</th>\n                        <th>x</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                        {customAttributes.map(customAttribute => (\n                        <tr key={customAttribute.contact_id + '.' + customAttribute.id}>\n                            <td>{customAttribute.id}</td>\n                            <td>{customAttribute.contact_id}</td>\n                            <td>{customAttribute.key}</td>\n                            <td>{customAttribute.value}</td>\n                            <td>\n                                <button onClick={() => this.onCustomAttributeDelete(customAttribute.id)}>X</button>\n                            </td>\n                        </tr>\n                    ))}\n                    </tbody>\n                </table>\n\n                {nav}\n            </>\n        );\n    }\n}\n\nexport default CustomAttributesPage;\n","import React from 'react';\n\nconst NotFoundPage = () => (\n    <h1>404: Page Not Found</h1>\n);\n\nexport default NotFoundPage;\n","import React, {useState} from 'react';\nimport store from \"./redux/store\";\nimport {BrowserRouter, Link, Route, Switch} from \"react-router-dom\";\n\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\n\nimport CsvUploadPage from \"./pages/CsvUploadPage\";\nimport CsvColumnMappingPage from \"./pages/CsvColumnMappingPage\";\nimport RemappingPreviewPage from \"./pages/RemappingPreviewPage\";\nimport ProcessPage from \"./pages/ProcessPage\";\nimport ContactsPage from \"./pages/ContactsPage\";\nimport CustomAttributesPage from \"./pages/CustomAttributesPage\";\nimport NotFoundPage from \"./pages/NotFoundPage\";\n\nexport const API_URL = \"http://localhost:8000/api\";\n\nfunction App(props) {\n    return (\n        <BrowserRouter>\n            <header id=\"App-header\">\n                <Navbar expand=\"lg\">\n                    <Nav className=\"\">\n                        <h1>CSV Uploader</h1>\n                    </Nav>\n                    <Nav className=\"ml-auto\">\n                        Steps\n                        <ul className=\"steps-inline\">\n                            <Nav.Link as={Link} to=\"/upload\">CSV Upload</Nav.Link>\n                            <Nav.Link as={Link} to=\"/mapping\">Column Mapping</Nav.Link>\n                            <Nav.Link as={Link} to=\"/preview\">Preview</Nav.Link>\n                            <Nav.Link as={Link} to=\"/process\">Process</Nav.Link>\n                            <Nav.Link as={Link} to=\"/contacts\">Contacts</Nav.Link>\n                            <Nav.Link as={Link} to=\"/custom-attributes\">Custom Attributes</Nav.Link>\n                        </ul>\n                    </Nav>\n                </Navbar>\n            </header>\n\n            <main className=\"App\">\n                <div id=\"App-body\">\n                    <div className=\"row\">\n                        <div className=\"col-12\">\n                            <Switch>\n                                <Route path=\"/\" component={CsvUploadPage} exact/>\n                                <Route path=\"/upload\" component={CsvUploadPage}/>\n                                <Route path=\"/mapping\" component={CsvColumnMappingPage} exact/>\n                                <Route path=\"/preview\" component={RemappingPreviewPage} exact/>\n                                <Route path=\"/process\" component={ProcessPage} exact/>\n                                <Route path=\"/contacts\" component={ContactsPage} exact/>\n                                <Route path=\"/custom-attributes\" component={CustomAttributesPage} exact/>\n                                <Route path=\"/not-found\" component={NotFoundPage} exact/>\n                                <Route component={NotFoundPage}/>\n                            </Switch>\n                        </div>\n                    </div>\n                </div>\n            </main>\n\n        </BrowserRouter>\n    )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport store from './redux/store';\nimport './index.css';\nimport App from './App';\n\n// store.subscribe( () => console.log('store', store.getState()));\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}