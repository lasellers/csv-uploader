{"version":3,"sources":["serviceWorker.js","redux/reducers/csv.js","redux/reducers/index.js","redux/store.js","redux/actions.js","pages/CsvUploadPage.js","pages/CsvColumnMappingPage.js","pages/RemappingPreviewPage.js","pages/ProcessPage.js","pages/ContactsPage.js","pages/CustomAttributesPage.js","pages/NotFoundPage.js","components/NavHeader.js","components/ErrorBox.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","initialState","error","csv_headers","csv_data","unmapped_data","remapped_csv_data","remapped_order","db_headers","db_named_headers","combineReducers","csv","state","action","type","payload","length","createStore","rootReducer","__REDUX_DEVTOOLS_EXTENSION__","addCsvHeaders","data","addCsvData","addUnmappedData","addError","CsvUploadPage","props","onFileChange","event","a","preventDefault","files","target","text","csvToArray","header","store","dispatch","setState","selectedFile","rows","trim","split","shift","newRows","forEach","row","line","push","onFileUpload","goNext","uploadedFileData","headers","getState","join","name","lastModifiedDate","toDateString","bind","this","to","className","onChange","onClick","React","Component","CsvColumnMappingPage","onMappingChange","id","value","onMappingAccept","remapCsvToContactsAndCustomAttributes","remappedData","unmappedData","remapped","contacts","newContacts","newCustomAttributes","contact","contact_id","newContact","Array","fill","order","index","includes","defaultRemappedOrder","index2","indexOf","keys","goBack","dropdownOrder","headersCsv","nav","map","column","key","csv_header","RemappingPreviewPage","col","ProcessPage","isLoaded","contact_inserts","custom_attribute_inserts","custom_attributes","fetch","API_URL","method","body","JSON","stringify","then","response","ok","Error","statusText","json","hasOwnProperty","console","warn","errors","catch","ContactsPage","getContacts","Promise","reject","isArray","onContactDelete","res","result","team_id","phone","email","sticky_phone_number_id","created_at","updated_at","CustomAttributesPage","onCustomAttributeDelete","goHome","customAttributes","flatMap","customAttribute","NotFoundPage","NavHeader","useLocation","Navbar","expand","Nav","Link","as","pathname","ErrorBox","useState","setError","subscribe","toLocaleString","messages","Object","entries","field","message","toString","process","App","path","component","exact","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2057f60c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\n    error: null,\n    csv_headers: [],\n    csv_data: [],\n    unmapped_data: [],\n    remapped_csv_data: [],\n    remapped_order: [],\n    // read only SSOA\n    db_headers: ['team_id', 'name', 'phone', 'email', 'sticky_phone_number_id', 'created_at', 'updated_at'],\n    db_named_headers: ['Team Id', 'Name', 'Phone', 'Email', 'Sticky Phone Number Id', 'Created', 'Updated'],\n};\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case 'ADD_CSV_HEADERS': {\n            const {csv_headers} = action.payload;\n            return {\n                ...state,\n                csv_headers\n            };\n        }\n        case 'ADD_CSV_DATA': {\n            const {csv_data} = action.payload;\n            return {\n                ...state,\n                csv_data\n            };\n        }\n        case 'ADD_UNMAPPED_DATA': {\n            const {unmapped_data} = action.payload;\n            return {\n                ...state,\n                unmapped_data\n            };\n        }\n        case 'ADD_REMAPPED_CSV_DATA': {\n            const {remapped_csv_data} = action.payload;\n            return {\n                ...state,\n                remapped_csv_data\n            };\n        }\n        case 'ADD_REMAPPED_COLUMN_ORDER': {\n            const {remapped_order} = action.payload;\n            return {\n                ...state,\n                remapped_order\n            };\n        }\n        case 'ADD_ERROR': {\n            let {error} = action.payload;\n            if (error === {} || error === [] || error.length === 0)\n                error = null;\n            return {\n                ...state,\n                error\n            };\n        }\n        case 'CLEAR_ERROR': {\n            return {\n                ...state,\n                error: null\n            };\n        }\n        default:\n            return state;\n    }\n}\n","import { combineReducers } from \"redux\";\n\nimport csv from \"./csv\";\n\nexport default combineReducers({ csv });\n","import {createStore} from \"redux\";\n\nimport rootReducer from \"./reducers/index\";\n\nexport default createStore(rootReducer,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n","export const addCsvHeaders = data => ({\n    type: 'ADD_CSV_HEADERS',\n    payload: {\n        csv_headers: data\n    }\n});\n\nexport const addCsvData = data => ({\n    type: 'ADD_CSV_DATA',\n    payload: {\n        csv_data: data\n    }\n});\n\nexport const addUnmappedData = data => ({\n    type: 'ADD_UNMAPPED_DATA',\n    payload: {\n        unmapped_data: data\n    }\n});\n\nexport const addRemappedCsvData = data => ({\n    type: 'ADD_REMAPPED_CSV_DATA',\n    payload: {\n        remapped_csv_data: data\n    }\n});\n\nexport const addRemappedColumnOrder = data => ({\n    type: 'ADD_REMAPPED_COLUMN_ORDER',\n    payload: {\n        remapped_order: data\n    }\n});\n\nexport const addError = data => ({\n    type: 'ADD_ERROR',\n    payload: {\n        error: data\n    }\n});\n\nexport const clearError = data => ({\n    type: 'CLEAR_ERROR'\n});","import React from 'react';\nimport store from \"../redux/store\";\nimport {Redirect} from \"react-router\";\nimport {addCsvHeaders, clearError} from \"../redux/actions\";\nimport {addCsvData} from \"../redux/actions\";\n\nclass CsvUploadPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedFile: null,\n            header: null,\n            data: null,\n            goNext: false\n        };\n\n        this.onFileChange = this.onFileChange.bind(this);\n        this.onFileUpload = this.onFileUpload.bind(this);\n    }\n\n    // Input type=\"file\" onChange, returns FileList on event target\n    // with .files with File object\n    // @see https://developer.mozilla.org/en-US/docs/Web/API/FileList\n    // @see https://developer.mozilla.org/en-US/docs/Web/API/File\n    onFileChange = async event => {\n        event.preventDefault();\n\n        const files = event.target.files;\n        if (files.length > 0) {\n            const csv = (await files[0].text());\n            const [header, data] = this.csvToArray(csv);\n\n            store.dispatch(addCsvHeaders(header));\n            store.dispatch(addCsvData(data));\n\n            // Update the state\n            this.setState({\n                selectedFile: files[0],\n                header: header,\n                data: data\n            });\n        }\n    };\n\n    csvToArray = (csv) => {\n        const rows = csv.trim().split(\"\\n\");\n        const header = rows.shift().trim().split(\",\");\n        let newRows = [];\n        rows.forEach(row => {\n            const line = row.trim();\n            if (line.length > 0) newRows.push(line.split(\",\"));\n        });\n        return [\n            header,\n            newRows\n        ];\n    };\n\n    // On file upload (click the upload button)\n    onFileUpload = async (event) => {\n        this.setState({goNext: true});\n    };\n\n    // File content to be displayed after\n    // file upload is complete\n    uploadedFileData = () => {\n        if (this.state.selectedFile) {\n            const headers = store.getState().csv.csv_headers.join(', ');\n            return (\n                <>\n                    <p><b>CSV File Details</b></p>\n                    <hr/>\n                    <p>File Name: {this.state.selectedFile.name}</p>\n                    <p>File Type: {this.state.selectedFile.type}</p>\n                    <p>Last Modified: {this.state.selectedFile.lastModifiedDate.toDateString()}</p>\n                    <p>Rows: {this.state.data.length}</p>\n                    <p>Headers: {headers}</p>\n                </>\n            );\n        } else {\n            return (\n                <>\n                    <br/>\n                    <h4>Choose File from local system before pressing the Upload button.</h4>\n                </>\n            );\n        }\n    };\n\n    render() {\n        const {goNext} = this.state;\n\n        if (goNext) {\n            return <Redirect to='/mapping'/>;\n        }\n\n        return (\n            <>\n                <h1>CSV File Upload</h1>\n\n                <div>\n                    <input className=\"btn btn-secondary mr-2\" type=\"file\" onChange={this.onFileChange}/>\n                    <button className=\"btn btn-primary ml-2\" onClick={() => {\n                        store.dispatch(clearError());\n                        this.onFileUpload()\n                    }}>\n                        Upload\n                    </button>\n                </div>\n\n                {this.uploadedFileData()}\n            </>\n        );\n    }\n}\n\nexport default CsvUploadPage;\n","import React from 'react';\nimport store from \"../redux/store\";\nimport {Redirect} from \"react-router\";\nimport {addRemappedCsvData, addUnmappedData, clearError} from \"../redux/actions\";\n\nclass CsvColumnMappingPage extends React.Component {\n    constructor(props) {\n        super(props);\n\n        const db_headers = store.getState().csv.db_headers;\n        const csv_headers = store.getState().csv.csv_headers;\n\n        // Normally the default order is 0,1,2,3,4,5,6,7 and the like as far the the dropdown goes.\n        const order = [...(db_headers).keys()];\n\n        const remapped_order = this.defaultRemappedOrder(db_headers, csv_headers, order);\n\n        this.state = {\n            error: \"\",\n            remapped_order: remapped_order,\n            goNext: false,\n            goBack: false,\n            dropdownOrder: order\n        };\n\n        this.onMappingChange = this.onMappingChange.bind(this);\n        this.onMappingAccept = this.onMappingAccept.bind(this);\n    }\n\n    onMappingChange = async (event) => {\n        const id = (event.target.id.split('-'))[1]; //event.target.selectedIndex;\n        const value = event.target.value;\n\n        const remapped_order = this.state.remapped_order;\n        remapped_order[id] = value;\n        await this.setState({remapped_order: remapped_order});\n    };\n\n    onMappingAccept = async event => {\n        const csv_headers = store.getState().csv.csv_headers;\n        const csv_data = store.getState().csv.csv_data;\n        const remapped_order = this.state.remapped_order;\n        const db_headers = store.getState().csv.db_headers;\n\n        const [remappedData, unmappedData] = this.remapCsvToContactsAndCustomAttributes(csv_data, remapped_order, csv_headers, db_headers);\n\n        store.dispatch(addRemappedCsvData(remappedData));\n        store.dispatch(addUnmappedData(unmappedData));\n\n        // Update the state\n        this.setState({\n            remapped: remappedData,\n            goNext: true\n        });\n    };\n\n    /**\n     *\n     * @param contacts\n     * @param remapped_order\n     * @param csv_headers\n     * @param db_headers\n     * @returns {[[], []]}\n     */\n    remapCsvToContactsAndCustomAttributes = (contacts, remapped_order, csv_headers, db_headers) => {\n        let newContacts = [];\n        let newCustomAttributes = [];\n\n        contacts.forEach(function (contact, contact_id) {\n            let newContact = new Array(db_headers.length).fill(\"\");\n\n            remapped_order.forEach(function (order, index) {\n                if (remapped_order[index] >= 0) {\n                    newContact[index] = contact[remapped_order[index]];\n                }\n            });\n\n            csv_headers.forEach(function (value, index) {\n                if (!remapped_order.includes(index)) {\n                    newCustomAttributes.push([contact_id, csv_headers[index], value]);\n                }\n            });\n\n            newContacts.push(newContact);\n        });\n        return [newContacts, newCustomAttributes];\n    };\n\n    /**\n     * This tried to guess the remap order by comparing the csv header columns against the db standard order.\n     * i.e., if they are the same order then mapping stays: 0,1,2,3,4,5,6.\n     * If the headers are reversed then this comes out: 6,5,4,3,2,1,0\n     */\n    defaultRemappedOrder = (db_headers, csv_headers, order) => {\n        let remapped_order = new Array(db_headers.length).fill(-1);\n\n        db_headers.forEach((header, index) => {\n            const index2 = csv_headers.indexOf(header);\n            if (index2 >= 0) {\n                remapped_order[index] = index2;\n            }\n        });\n        return remapped_order;\n    };\n\n    render() {\n        const {goNext, goBack} = this.state;\n\n        if (goNext) {\n            return <Redirect to='/preview'/>;\n        }\n        if (goBack) {\n            return <Redirect to='/upload'/>;\n        }\n\n        const db_named_headers = store.getState().csv.db_named_headers;\n        const csv_headers = store.getState().csv.csv_headers;\n        const csv_data = store.getState().csv.csv_data;\n        const headersCsv = store.getState().csv.csv_headers.join(', ');\n\n        const nav = (\n            <>\n                <div>\n                    <button className=\"btn btn-secondary mr-2\" onClick={() => this.setState({goBack: true})}>Back\n                    </button>\n                    <button className=\"btn btn-primary ml-2\" onClick={ () => {\n                        store.dispatch(clearError());\n                        this.onMappingAccept();\n                    }}>Next</button>\n                </div>\n            </>\n        );\n\n        if (csv_data.length === 0) {\n            return (\n                <>\n                    <h1>Remapping</h1>\n                    <p>No data.</p>\n                    {nav}\n                </>\n            )\n        }\n\n        return (\n            <>\n                <h1>Remapping</h1>\n\n                <p><b>CSV File Details</b></p>\n                <hr/>\n                <p>Headers: {headersCsv}</p>\n\n                <table className=\"table table-striped\">\n                    <thead>\n                    <tr>\n                        <th>Column</th>\n                        <th>Remap from</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {db_named_headers.map((column, index) => (\n                        <tr key={index}>\n                            <td>\n                                {column}\n                            </td>\n                            <td>\n                                <select id={\"select-\" + index} value={this.state.remapped_order[index]}\n                                        onChange={this.onMappingChange}>\n                                    <option key={-1} value=\"\"> (None)</option>\n                                    {csv_headers.map((csv_header, index2) => (\n                                        <option id={index + '.' + index2} key={index2}\n                                                value={index2}>{csv_header} (Ex: {csv_data[0][index2]})</option>\n                                    ))}\n                                </select>\n                            </td>\n                        </tr>\n                    ))}\n                    </tbody>\n                </table>\n\n                {nav}\n            </>\n        );\n    }\n}\n\nexport default CsvColumnMappingPage;\n","import React from 'react';\nimport store from \"../redux/store\";\nimport {Redirect} from \"react-router\";\nimport {clearError} from \"../redux/actions\";\n\nclass RemappingPreviewPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            goNext: false,\n            goBack: false\n        };\n\n    }\n\n    render() {\n        const {goNext, goBack} = this.state;\n\n        const db_named_headers = store.getState().csv.db_named_headers;\n        const data = store.getState().csv.remapped_csv_data;\n\n        if (goNext) {\n            return <Redirect to='/process'/>;\n        }\n        if (goBack) {\n            return <Redirect to='/mapping'/>;\n        }\n\n        const nav = (\n            <>\n                <div>\n                    <button className=\"btn btn-secondary mr-2\" onClick={() => this.setState({goBack: true})}>Back\n                    </button>\n                    <button className=\"btn btn-primary ml-2\" onClick={() => {\n                        store.dispatch(clearError());\n                        this.setState({goNext: true})\n                    }}>Next\n                    </button>\n                </div>\n            </>\n        );\n\n        return (\n            <>\n                <h1>Preview</h1>\n\n                <table className=\"table table-striped\">\n                    <thead>\n                    <tr>\n                        {db_named_headers.map((column, index) => (\n                            <th key={index}>{column}</th>\n                        ))}\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {data.map((row, index) => (\n                        <tr key={index}>\n                            {row.map((col, index2) => (\n                                <td key={index + \".\" + index2}>{col}</td>\n                            ))}\n                        </tr>\n                    ))}\n                    </tbody>\n                </table>\n\n                {nav}\n            </>\n        );\n    }\n}\n\nexport default RemappingPreviewPage;\n","import React from 'react';\nimport {API_URL} from \"../App\";\nimport store from \"../redux/store\";\nimport {Redirect} from \"react-router\";\nimport {addError, clearError} from \"../redux/actions\";\n\nclass ProcessPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            goBack: false,\n            goNext: false,\n            isLoaded: false,\n            data: {\n                contact_inserts: 0,\n                custom_attribute_inserts: 0,\n                contacts: [],\n                custom_attributes: []\n            }\n        };\n    }\n\n    componentDidMount() {\n        const contacts = store.getState().csv.remapped_csv_data;\n        const custom_attributes = store.getState().csv.unmapped_data;\n\n        fetch(API_URL + \"/csv/save\", {\n            method: \"POST\",\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({contacts, custom_attributes})\n        })\n            .then(response => {\n                if (!response.ok) {\n                    throw Error(response.statusText);\n                }\n                return response.json();\n            })\n            .then((data) => {\n                this.setState({\n                    isLoaded: true,\n                    data\n                });\n                // get the formrequest validation errors from the api\n                if (data.hasOwnProperty('errors')) {\n                    console.warn('errs prop', data.errors);\n                    store.dispatch(addError(data.errors));\n                } else {\n                    store.dispatch(addError(data));\n                }\n            })\n            .catch((error) => {\n                console.error(error);\n                store.dispatch(addError(error));\n                this.setState({\n                    isLoaded: true,\n                    data: []\n                });\n            });\n    }\n\n    render() {\n        const {goNext, goBack, isLoaded} = this.state;\n        const data = this.state.data;\n\n        if (goNext) {\n            return <Redirect to='/contacts'/>;\n        }\n        if (goBack) {\n            return <Redirect to='/mapping'/>;\n        }\n\n        const nav = (\n            <>\n                <div>\n                    <button className=\"btn btn-secondary mr-2\" onClick={() => this.setState({goBack: true})}>Back\n                    </button>\n                    <button className=\"btn btn-primary ml-2\" onClick={() => {\n                        store.dispatch(clearError());\n                        this.setState({goNext: true});\n                    }}>Next\n                    </button>\n                </div>\n            </>\n        );\n\n        if (!isLoaded)\n            return (\n                <>\n                    <h1>Process</h1>\n                    <p>Processing....</p>\n                </>\n            );\n\n        return (\n            <>\n                <h1>Process</h1>\n                <p>CSV records have been added to database.</p>\n\n                <hr/>\n\n                <p>Contact inserts: {data.contact_inserts}</p>\n                <p>Contacts rows: {data.contacts?.length}</p>\n\n                <br/>\n\n                <p>Custom Attribute inserts: {data.custom_attribute_inserts}</p>\n                <p>Custom Attributes data rows: {data.custom_attributes?.length}</p>\n\n                {nav}\n            </>\n        );\n    }\n}\n\nexport default ProcessPage;\n","import React from 'react';\nimport {API_URL} from \"../App\";\nimport {Redirect} from \"react-router\";\nimport {BsFillTrashFill} from 'react-icons/bs';\nimport store from \"../redux/store\";\nimport {addError, clearError} from \"../redux/actions\";\n\nclass ContactsPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: \"\",\n            goBack: false,\n            goNext: false,\n            contacts: []\n        };\n    }\n\n    componentDidMount() {\n        this.getContacts();\n    }\n\n    getContacts = () => {\n        fetch(API_URL + \"/contacts\")\n            .then(response => {\n                if (!response.ok) {\n                    return Promise.reject(response.statusText);\n                }\n                return response.json();\n            })\n            .then((contacts) => {\n                if (Array.isArray(contacts)) {\n                    this.setState({\n                        isLoaded: true,\n                        contacts\n                    });\n                }\n            })\n            .catch((error) => {\n                console.error(error);\n                store.dispatch(addError(error));\n                this.setState({\n                    isLoaded: true,\n                    contacts: []\n                });\n            });\n    };\n\n    onContactDelete = async (id) => {\n        fetch(API_URL + \"/contacts/\" + id, {method: \"DELETE\"})\n            .then(res => res.json())\n            .then((result) => {\n                this.getContacts();\n            })\n            .catch((error) => {\n                console.error(error);\n                store.dispatch(addError(error));\n                this.setState({\n                    contacts: [] // if error, set this to empty array\n                });\n            });\n    };\n\n    render() {\n        const {isLoaded, contacts, goBack, goNext} = this.state;\n\n        if (goBack) {\n            return <Redirect to='/process'/>;\n        }\n        if (goNext) {\n            return <Redirect to='/custom-attributes'/>;\n        }\n\n        const nav = (\n            <>\n                <div>\n                    <button className=\"btn btn-secondary mr-2\" onClick={() => this.setState({goBack: true})}>Back\n                    </button>\n                    <button className=\"btn btn-primary ml-2\" onClick={() => {\n                        store.dispatch(clearError());\n                        this.setState({goNext: true});\n                    }}>Next</button>\n                </div>\n            </>\n        );\n\n        if (!isLoaded)\n            return (\n                <>\n                    <h1>Contacts</h1>\n                    <p>None.</p>\n                </>\n            );\n\n        return (\n            <>\n                <h1>Contacts</h1>\n\n                <table className=\"table table-striped\">\n                    <thead>\n                    <tr>\n                        <th>id</th>\n                        <th>Team</th>\n                        <th>Name</th>\n                        <th>Phone</th>\n                        <th>Email</th>\n                        <th>Sticky Phone</th>\n                        <th>Created</th>\n                        <th>Updated</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {contacts.map(contact => (\n                        <tr key={contact.id}>\n                            <td>{contact.id}</td>\n                            <td>{contact.team_id}</td>\n                            <td>{contact.name}</td>\n                            <td>{contact.phone}</td>\n                            <td>{contact.email}</td>\n                            <td>{contact.sticky_phone_number_id}</td>\n                            <td>{contact.created_at}</td>\n                            <td>{contact.updated_at}</td>\n                            <td>\n                                <button className=\"btn\" onClick={() => this.onContactDelete(contact.id)}>\n                                    <BsFillTrashFill/></button>\n                            </td>\n                        </tr>\n                    ))}\n                    </tbody>\n                </table>\n\n                {nav}\n            </>\n        );\n    }\n}\n\nexport default ContactsPage;\n","import React from 'react';\nimport {API_URL} from \"../App\";\nimport {Redirect} from \"react-router\";\nimport {BsFillTrashFill} from 'react-icons/bs';\nimport store from \"../redux/store\";\nimport {addError, clearError} from \"../redux/actions\";\n\nclass CustomAttributesPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            goBack: false,\n            goHome: false,\n            contacts: [\n                {custom_attributes: []}\n            ]\n        };\n    }\n\n    componentDidMount() {\n        this.getContacts();\n    }\n\n    getContacts = () => {\n        fetch(API_URL + \"/contacts\")\n            .then(response => {\n                if (!response.ok) {\n                    return Promise.reject(response.statusText);\n                }\n                return response.json();\n            })\n            .then((contacts) => {\n                if (Array.isArray(contacts)) {\n                    this.setState({\n                        isLoaded: true,\n                        contacts\n                    });\n                }\n            })\n            .catch((error) => {\n                    console.error(error);\n                    store.dispatch(addError(error));\n                    this.setState({\n                        isLoaded: true,\n                        contacts: [ // if error, set this to empty array\n                            {custom_attributes: []}\n                        ]\n                    });\n                }\n            )\n    };\n\n    onCustomAttributeDelete = async (id) => {\n        fetch(API_URL + \"/custom-attributes/\" + id, {method: \"DELETE\"})\n            .then(res => res.json())\n            .then((result) => {\n                this.getContacts();\n            })\n            .catch((error) => {\n                console.error(error);\n                store.dispatch(addError(error));\n                this.setState({\n                    contacts: [] // if error, set this to empty array\n                });\n            });\n    };\n\n    render() {\n        const {isLoaded, contacts, goBack, goHome} = this.state;\n        const customAttributes = contacts.flatMap(row => {\n            return row.custom_attributes;\n        });\n\n        if (goBack) {\n            return <Redirect to='/contacts'/>;\n        }\n        if (goHome) {\n            return <Redirect to='/upload'/>;\n        }\n\n        const nav = (\n            <>\n                <div>\n                    <button className=\"btn btn-secondary mr-2\" onClick={() => this.setState({goBack: true})}>Back\n                    </button>\n                    <button className=\"btn btn-primary ml-2\" onClick={() => {\n                        store.dispatch(clearError());\n                        this.setState({goHome: true});\n                    }}>Home</button>\n                </div>\n            </>\n        );\n\n        if (!isLoaded)\n            return (\n                <>\n                    <h1>Custom Attributes</h1>\n                    <p>None.</p>\n                </>\n            );\n\n        return (\n            <>\n                <h1>Custom Attributes</h1>\n\n                <table className=\"table table-striped\">\n                    <thead>\n                    <tr>\n                        <th>id</th>\n                        <th>Contact Id</th>\n                        <th>Key</th>\n                        <th>Value</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {customAttributes.map(customAttribute => (\n                        <tr key={customAttribute.contact_id + '.' + customAttribute.id}>\n                            <td>{customAttribute.id}</td>\n                            <td>{customAttribute.contact_id}</td>\n                            <td>{customAttribute.key}</td>\n                            <td>{customAttribute.value}</td>\n                            <td>\n                                <button className=\"btn\"\n                                        onClick={() => this.onCustomAttributeDelete(customAttribute.id)}>\n                                    <BsFillTrashFill/></button>\n                            </td>\n                        </tr>\n                    ))}\n                    </tbody>\n                </table>\n\n                {nav}\n            </>\n        );\n    }\n}\n\nexport default CustomAttributesPage;\n","import React from 'react';\n\nconst NotFoundPage = () => (\n    <h1>404: Page Not Found</h1>\n);\n\nexport default NotFoundPage;\n","import React from 'react';\nimport {Link} from \"react-router-dom\";\n\nimport './NavHeader.css';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport {useLocation} from 'react-router-dom';\n\nfunction NavHeader(props) {\n    let location = useLocation();\n    return (\n        <>\n            <header id=\"App-header\">\n                <Navbar expand=\"lg\">\n                    <Nav className=\"ml-auto\">\n                        <h1>CSV Uploader</h1>\n                    </Nav>\n                    <Nav className=\"mr-auto\">\n                        <ul className=\"steps-inline\">\n                            <Nav.Link as={Link} to=\"/upload\">\n                                <div\n                                    className={['', '/', '/upload'].includes(location.pathname) ? 'btn btn-step active' : 'btn btn-step'}>1\n                                </div>\n                            </Nav.Link>\n                            <Nav.Link as={Link} to=\"/mapping\">\n                                <div\n                                    className={location.pathname === '/mapping' ? 'btn btn-step active' : 'btn btn-step'}>2\n                                </div>\n                            </Nav.Link>\n                            <Nav.Link as={Link} to=\"/preview\">\n                                <div\n                                    className={location.pathname === '/preview' ? 'btn btn-step active' : 'btn btn-step'}>4\n                                </div>\n                            </Nav.Link>\n                            <Nav.Link as={Link} to=\"/process\">\n                                <div\n                                    className={location.pathname === '/process' ? 'btn btn-step active' : 'btn btn-step'}>5\n                                </div>\n                            </Nav.Link>\n                            <Nav.Link as={Link} to=\"/contacts\">\n                                <div\n                                    className={location.pathname === '/contacts' ? 'btn btn-step active' : 'btn btn-step'}>6\n                                </div>\n                            </Nav.Link>\n                            <Nav.Link as={Link} to=\"/custom-attributes\">\n                                <div\n                                    className={location.pathname === '/custom-attributes' ? 'btn btn-step active' : 'btn btn-step'}>7\n                                </div>\n                            </Nav.Link>\n                        </ul>\n                    </Nav>\n                </Navbar>\n            </header>\n        </>\n    )\n}\n\nexport default NavHeader;\n","import React, {useState} from 'react';\nimport store from \"../redux/store\";\nimport {clearError} from \"../redux/actions\";\nimport './ErrorBox.css';\n\nfunction ErrorBox() {\n    const [error, setError] = useState(null);\n\n    store.subscribe(function () {\n        const csv = store.getState().csv;\n        setError(csv.error);\n    });\n\n    if (error === null)\n        return (<><p></p></>);\n\n    if (typeof error === 'string') {\n        return (\n            <>\n                <div className=\"col-md-12 text-center error\">\n                    <p>Error: {error.toLocaleString()}</p>\n                    <button className=\"btn btn-primary btn-sm\" onClick={() => {\n                        store.dispatch(clearError());\n                    }}>Clear Error\n                    </button>\n                </div>\n            </>\n        );\n    }\n\n    // formrequest validation errors\n    if (typeof error === \"object\") {\n\n        let messages = [];\n        for (const [key, value] of Object.entries(error)) {\n            for (const [field, message] of Object.entries(value)) {\n                messages.push({field, message});\n            }\n        }\n\n        if (messages.length > 0) {\n            return (\n                <>\n                    <div className=\"col-md-12 text-center error\">\n                        <h3>Validation Errors</h3>\n                        <table className=\"table table-striped table-sm\">\n                            <thead>\n                            <tr>\n                                <th>Field</th>\n                                <th>Message</th>\n                            </tr>\n                            </thead>\n                            <tbody>\n                            {messages.map((message, index) => (\n                                <tr key={index}>\n                                    <td>{message.field}</td>\n                                    <td>{message.message}</td>\n                                </tr>\n                            ))}\n                            </tbody>\n                        </table>\n                        <div className=\"col-md-12 text-center\">\n                            <button className=\"btn btn-primary btn-sm\" onClick={() => {\n                                store.dispatch(clearError());\n                            }}>Clear Errors\n                            </button>\n                        </div>\n                    </div>\n                </>\n            )\n        }\n    }\n\n    return (<>\n            <div className=\"col-md-12 text-center error\">\n                <p>API Error: {error.toString()}</p>\n                <button className=\"btn btn-primary btn-sm\" onClick={() => {\n                    store.dispatch(clearError());\n                }}>Clear Error\n                </button>\n            </div>\n        </>\n    );\n\n}\n\nexport default ErrorBox;\n","import React from 'react';\nimport {BrowserRouter, Route, Switch} from \"react-router-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport './App.css';\n\nimport CsvUploadPage from \"./pages/CsvUploadPage\";\nimport CsvColumnMappingPage from \"./pages/CsvColumnMappingPage\";\nimport RemappingPreviewPage from \"./pages/RemappingPreviewPage\";\nimport ProcessPage from \"./pages/ProcessPage\";\nimport ContactsPage from \"./pages/ContactsPage\";\nimport CustomAttributesPage from \"./pages/CustomAttributesPage\";\nimport NotFoundPage from \"./pages/NotFoundPage\";\n\nimport NavHeader from \"./components/NavHeader\";\nimport ErrorBox from \"./components/ErrorBox\";\n\nexport const API_URL = process.env.REACT_APP_API_URL;\n\nfunction App(props) {\n    return (\n        <BrowserRouter>\n            <NavHeader/>\n            <ErrorBox/>\n            <main className=\"App\">\n                <div id=\"App-body\">\n                    <div className=\"container-fluid\">\n                        <div className=\"row\">\n                            <div className=\"col-12\">\n                                <Switch>\n                                    <Route path=\"/\" component={CsvUploadPage} exact/>\n                                    <Route path=\"/upload\" component={CsvUploadPage}/>\n                                    <Route path=\"/mapping\" component={CsvColumnMappingPage} exact/>\n                                    <Route path=\"/preview\" component={RemappingPreviewPage} exact/>\n                                    <Route path=\"/process\" component={ProcessPage} exact/>\n                                    <Route path=\"/contacts\" component={ContactsPage} exact/>\n                                    <Route path=\"/custom-attributes\" component={CustomAttributesPage} exact/>\n                                    <Route path=\"/not-found\" component={NotFoundPage} exact/>\n                                    <Route component={NotFoundPage}/>\n                                </Switch>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </main>\n        </BrowserRouter>\n    )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport store from './redux/store';\nimport './index.css';\nimport App from './App';\n\n// store.subscribe( () => console.log('store', store.getState()));\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}